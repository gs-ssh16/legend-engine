// Copyright 2025 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::store::relational::runtime::*;

Class meta::external::store::relational::runtime::GenerationFeaturesConfig extends meta::external::store::relational::runtime::RelationalQueryGenerationConfig
[
  noDuplicatesBetweenEnabledAndDisabled: $this.enabled->forAll(e | !$e->in($this.disabled)),
  knownFeatures: if($this.enabled->concatenate($this.disabled)->forAll(f | $f->in(meta::external::store::relational::runtime::knownGenerationFeatures())),
                    | true,
                    | fail('Features provided in GenerationFeaturesConfig should be in the list of known features - ' + meta::external::store::relational::runtime::knownGenerationFeatures()->joinStrings('[', ', ', ']'))
                 )
]
{
  enabled: String[*];
  disabled: String[*];
}

function meta::external::store::relational::runtime::knownGenerationFeatures(): String[*]
{
  [
    meta::external::store::relational::runtime::removeUnionOrJoinsGenerationFeatureName(),
    meta::external::store::relational::runtime::splitRootUnionGenerationFeatureName()
  ]
}

function meta::external::store::relational::runtime::removeUnionOrJoinsGenerationFeatureName(): String[1]
{
  'REMOVE_UNION_OR_JOINS'
}

function meta::external::store::relational::runtime::splitRootUnionGenerationFeatureName(): String[1]
{
  'SPLIT_ROOT_UNION'
}

function meta::external::store::relational::runtime::isGenerationFeatureEnabledInConnection(dbConnection: meta::external::store::relational::runtime::DatabaseConnection[1], feature: String[1]): Boolean[1]
{
  $dbConnection.queryGenerationConfigs->exists(cfg | $cfg->instanceOf(GenerationFeaturesConfig) && $cfg->cast(@GenerationFeaturesConfig).enabled->contains($feature))
}

function meta::external::store::relational::runtime::isGenerationFeatureDisabledInConnection(dbConnection: meta::external::store::relational::runtime::DatabaseConnection[1], feature: String[1]): Boolean[1]
{
  $dbConnection.queryGenerationConfigs->exists(cfg | $cfg->instanceOf(GenerationFeaturesConfig) && $cfg->cast(@GenerationFeaturesConfig).disabled->contains($feature))
}
