// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

Class <<typemodifiers.abstract>> meta::relational::sqlPlanner::ruleBasedTransformation::RuleBasedSqlTransformer
{
  name: String[1];
  enabledByDefault: Boolean[1];
  databaseSupport: meta::relational::sqlPlanner::ruleBasedTransformation::DatabaseSupport[1];

  transformSqlQuery(select: meta::relational::metamodel::relation::SelectSQLQuery[1], connection: meta::external::store::relational::runtime::DatabaseConnection[1], extensions: meta::pure::extension::Extension[*])
  {
    fail('Needs to be implemented in sub classes'); $select;
  }: meta::relational::metamodel::relation::SelectSQLQuery[1];
}

Class <<typemodifiers.abstract>> meta::relational::sqlPlanner::ruleBasedTransformation::DatabaseSupport
{
  isDatabaseTypeSupported(dbType: String[1]) { fail('Needs to be implemented in sub classes'); false; }: Boolean[1];
}

Class meta::relational::sqlPlanner::ruleBasedTransformation::AllDatabaseSupport extends meta::relational::sqlPlanner::ruleBasedTransformation::DatabaseSupport
{
  isDatabaseTypeSupported(dbType: String[1]) { true }: Boolean[1];
}

Class meta::relational::sqlPlanner::ruleBasedTransformation::LimitedDatabaseSupport extends meta::relational::sqlPlanner::ruleBasedTransformation::DatabaseSupport
{
  supportedDatabaseTypes: String[*];
  isDatabaseTypeSupported(dbType: String[1]) { $dbType->in($this.supportedDatabaseTypes) }: Boolean[1];
}

function meta::relational::sqlPlanner::ruleBasedTransformation::executeRuleBasedTransformersOnSelectSQLQuery(select: meta::relational::metamodel::relation::SelectSQLQuery[1], connection: meta::external::store::relational::runtime::DatabaseConnection[1], extensions: meta::pure::extension::Extension[*]): meta::relational::metamodel::relation::SelectSQLQuery[1]
{
  let ruleBasedTransformers = $connection->meta::relational::sqlPlanner::ruleBasedTransformation::fetchInScopeRuleBasedTransformers($extensions);
  // TODO: Currently, one pass but can make it multiple passes
  $ruleBasedTransformers->fold({t, agg |
    $t->meta::relational::sqlPlanner::utils::executeSubTypeQualifierAndCast('transformSqlQuery', [list($agg), list($connection), list($extensions)], @meta::relational::metamodel::relation::SelectSQLQuery)
  }, $select);
}

function <<access.private>> meta::relational::sqlPlanner::ruleBasedTransformation::fetchInScopeRuleBasedTransformers(connection: meta::external::store::relational::runtime::DatabaseConnection[1], extensions: meta::pure::extension::Extension[*]): meta::relational::sqlPlanner::ruleBasedTransformation::RuleBasedSqlTransformer[*]
{
  let defaultTransformers = meta::relational::sqlPlanner::ruleBasedTransformation::defaultRuleBasedSqlTransformers();
  let extensionTransformers = $extensions->map(e | $e.moduleExtension('relational')->cast(@meta::relational::extension::RelationalExtension).relational_sqlPlanner_ruleBasedTransformation_extraRuleBasedSqlTransformers);

  let allTransformers = $defaultTransformers->concatenate($extensionTransformers);

  let filteredTransformers = $allTransformers->filter({t |
    if ($t.databaseSupport->meta::relational::sqlPlanner::utils::executeSubTypeQualifierAndCast('isDatabaseTypeSupported', list($connection.type.name), @Boolean),
        | // Transformer supported for database type
          if ($t.enabledByDefault,
              | // TODO: Check if excluded in connection
                true,
              | // TODO: Check if included in connection
                false
          ),
        | false
    ) 
  });
}

function meta::relational::sqlPlanner::ruleBasedTransformation::defaultRuleBasedSqlTransformers(): meta::relational::sqlPlanner::ruleBasedTransformation::RuleBasedSqlTransformer[*]
{
  [
    meta::relational::sqlPlanner::ruleBasedTransformation::filterPushDown::filterPushDownSqlTransformer()
  ]
}
