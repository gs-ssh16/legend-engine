// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sdt::framework::*;

function <<SDT.test>> meta::external::store::relational::sdt::suite::numberArithmetic::add(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('101 + 202', 303),
    testConfigForSimpleExpression('101 + 202.0', 303.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::numberArithmetic::subtract(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('101 - 202', -101),
    testConfigForSimpleExpression('101 - 202.0', -101.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::numberArithmetic::multiply(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('101 * 202', 20402),
    testConfigForSimpleExpression('101 * 202.0', 20402.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::numberArithmetic::divide(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('101 / 202', 0),
    testConfigForSimpleExpression('101 / cast(202 as decimal)', 0.5),
    testConfigForSimpleExpression('div(4, 3)', 1.0),
    testConfigForSimpleExpression('div(4.0::decimal, 3::decimal)', 1.0) 
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::numberArithmetic::arithmeticOperatorPrecedence(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('(2 * 3) + 4', 10),
    testConfigForSimpleExpression('2 * (3 + 4)', 14),
    testConfigForSimpleExpression('2 * 2 / 3', 1),
    testConfigForSimpleExpression('2 * (2 / 3)', 0)
  ]
}
