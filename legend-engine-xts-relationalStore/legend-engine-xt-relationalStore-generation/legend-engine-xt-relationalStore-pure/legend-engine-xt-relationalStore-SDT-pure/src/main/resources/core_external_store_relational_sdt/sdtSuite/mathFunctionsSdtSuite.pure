// Copyright 2024 Goldman Sachs
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

import meta::external::query::sql::metamodel::*;
import meta::external::store::relational::sdt::framework::*;

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::abs(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('abs(-101)', 101),
    testConfigForSimpleExpression('abs(-101.0)', 101.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::cbrt(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('cbrt(1)', 1.0),
    testConfigForSimpleExpression('cbrt(16.0)', 2.5198421),
    testConfigForSimpleExpression('cbrt(64.0)', 4.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::ceil(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('ceil(17)', 17.0),
    testConfigForSimpleExpression('ceil(17.4)', 18.0),
    testConfigForSimpleExpression('ceil(42.2)', 43.0),
    testConfigForSimpleExpression('ceil(-42.2)', -42.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::ceiling(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('ceiling(17)', 17.0),
    testConfigForSimpleExpression('ceiling(17.4)', 18.0),
    testConfigForSimpleExpression('ceiling(42.2)', 43.0),
    testConfigForSimpleExpression('ceiling(-42.2)', -42.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::exp(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('exp(1)', 2.71828183),
    testConfigForSimpleExpression('exp(2.0)', 7.3890561)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::factorial(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('factorial(3)', 6),
    testConfigForSimpleExpression('factorial(5)', 120)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::factorialWithCast(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('cast(factorial(3) as int)', 6),
    testConfigForSimpleExpression('cast(factorial(5) as int)', 120)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::floor(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('floor(17)', 17.0),
    testConfigForSimpleExpression('floor(17.4)', 17.0),
    testConfigForSimpleExpression('floor(42.2)', 42.0),
    testConfigForSimpleExpression('floor(-42.2)', -43.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::gcd(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('gcd(6, 4)', 2),
    testConfigForSimpleExpression('gcd(1071, 462)', 21)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::lcm(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('lcm(6, 4)', 12),
    testConfigForSimpleExpression('lcm(1071, 462)', 23562)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::ln(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('ln(2.0)', 0.69314718),
    testConfigForSimpleExpression('ln(4)', 1.38629436)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::log(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('log(100)', 2.0),
    testConfigForSimpleExpression('log(100.0)', 2.0),
    testConfigForSimpleExpression('log(10, 100)', 2.0),
    testConfigForSimpleExpression('log(2, 8)', 3.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::log10(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('log10(100)', 2.0),
    testConfigForSimpleExpression('log10(100.0)', 2.0)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::mod(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('mod(9, 4)', 1),
    testConfigForSimpleExpression('mod(13, 5)', 3)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::pow(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('pow(2, 4)', 16.0),
    testConfigForSimpleExpression('pow(3.2, 5.5)', 600.23992719)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::round(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('round(42.4)', 42.0),
    testConfigForSimpleExpression('round(42.44265, 2)', 42.44),
    testConfigForSimpleExpression('round(42.44265, 3)', 42.443)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::scale(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('scale(100)', 0),
    testConfigForSimpleExpression('scale(100.41)', 2),
    testConfigForSimpleExpression('scale(cast(\'100.4100\' as decimal))', 4)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::sign(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('sign(100)', 1),
    testConfigForSimpleExpression('sign(0.0)', 0),
    testConfigForSimpleExpression('sign(-123.0)', -1)
  ]
}

function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::signWithCast(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('cast(sign(100) as int)', 1),
    testConfigForSimpleExpression('cast(sign(0.0) as int)', 0),
    testConfigForSimpleExpression('cast(sign(-123.0) as int)', -1)
  ]
}


function <<SDT.test>> meta::external::store::relational::sdt::suite::mathFunctions::sqrt(): SqlDialectTest[*]
{
  [
    testConfigForSimpleExpression('sqrt(4)', 2.0),
    testConfigForSimpleExpression('sqrt(2)', 1.41421356237)
  ]
}